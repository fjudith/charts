# Default values for keycloak-gatekeeper.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

discoveryUrl: "https://keycloak.example.com/auth/realms/default"
clientId: CLIENT_ID
clientSecret: CLIENT_SECRET
redirectionUrl: "http://mysite.example.com"
#encryptionKey:
enableRefreshToken: true
upstreamUrl: "http://servicename.namespace.svc.cluster.local"
enableAuthorizationHeader: true
enableAuthorizationCookies: false
oauthUri: /oauth
requestIdHeader: X-Request-ID
enableSelfSignedTls: false
enableRequestId: false
enableRefreshTokens: true
enableLoginHandler: false
enableAuthorizationHeader: true

replicaCount: 1

image:
  repository: docker.io/keycloak/keycloak-gatekeeper
  tag: 4.6.0.Final
  pullPolicy: IfNotPresent

service:
  type: ClusterIP

  ## Optional static port assignment for service type NodePort.
  # nodePort: 30000

  port: 3000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - keycloak-gatekeeper.example.com
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

configmap:
  # the interface the service should be listening on [$PROXY_LISTEN], all interfaces is specified as ':<port>', unix sockets as unix://<REL_PATH>|</ABS PATH>
  listen: 0.0.0.0:3000
  
  # interface we should be listening [$PROXY_LISTEN_HTTP]
  # listenHttp: 0.0.0.0:8080
  
  # discovery url to retrieve the openid configuration [$PROXY_DISCOVERY_URL] - normally the <server>/auth/realm/<realm_name>
  discoveryUrl: "https://keycloak.example.com/auth/realms/default"
  
  # client id used to authenticate to the oauth service [$PROXY_CLIENT_ID]
  clientId: CLIENT_ID
  
  # client secret used to authenticate to the oauth service [$PROXY_CLIENT_SECRET]
  clientSecret: CLIENT_SECRET
  
  # the redirection url, essentially the site url, note: /oauth/callback is added at the end
  redirectionUrl: "http://mysite.example.com"
  
  # url for the revocation endpoint to revoke refresh token [$PROXY_REVOCATION_URL]
  # revocationUrl: "http://mysite.example.com"
  
  # skip the verification of any TLS communication with the openid provider (default: false)
  skipOpenidProviderTlsVerify: false
  
  # proxy for communication with the openid provider
  # openidProviderProxy:
  
  # timeout for openid configuration on .well-known/openid-configuration (default: 30s)
  openidProviderTimeout: 30s
  
  # common prefix for all URIs [$PROXY_BASE_URI]
  # baseUri:
  
  # the uri for proxy oauth endpoints (default: "/oauth") [$PROXY_OAUTH_URI]
  oauthUri: /oauth
  
  # additional scopes to add to add to the default (openid+email+profile)
  # scopes:
  #   - groups
  
  # url for the upstream endpoint you wish to proxy [$PROXY_UPSTREAM_URL]
  upstreamUrl: "http://servicename.namespace.svc.cluster.local"
  
  # the path to a file container a CA certificate to validate the upstream tls endpoint
  # upstreamCa:
  
  # a collection of resource i.e. urls that you wish to protect
  resources:
    - uri: /*
      # the methods on this url that should be protected, if missing, we assuming all
      # methods:
      #   - GET
      # a list of roles the user must have in order to access urls under the above
      # If all you want is authentication ONLY, simply remove the roles array - the user must be authenticated but
      # no roles are required
      # roles:
      #   - admin
    # - uri: /admin*
    #   methods:
    #     - GET
    #   roles:
    #     - client:test1
    #     - client:test2
    #   require-any-role: true
    #   groups:
    #     - admins
    #     - users
    # - uri: /backend*
    #   roles:
    #     - client:test1
    # - uri: /public/*
    #   white-listed: true
    # - uri: /favicon
    #   white-listed: true
    # - uri: /css/*
    #   white-listed: true
    # - uri: /img/*
    #   white-listed: true
  
  # headers permits you to inject custom headers into all requests
  # headers: {}
  
  # preserve the host header of the proxied request in the upstream request (default: false)
  preserveHost: false
  
  # the http header name for request id (default: "X-Request-ID") [$PROXY_REQUEST_ID_HEADER]
  requestIdHeader: X-Request-ID
  
  # custom headers to added to the http response key=value
  # responseHeaders: {}
  
  # create self signed certificates for the proxy (default: false) [$PROXY_ENABLE_SELF_SIGNED_TLS]
  enableSelfSignedTls: false
  # a list of hostnames to place on the self-signed certificate
  # selfSignedTlsHostnames
  #   - hostname1
  #   - hostname1.example.com
  
  # the expiration of the certificate before rotation (default: 3h0m0s)
  selfSignedTlsExpiration: 3h0m0s
  
  # indicates we should add a request id if none found (default: false) [$PROXY_ENABLE_REQUEST_ID]
  enableRequestId: false
  
  # enables a default denial on all requests, you have to explicitly say what is permitted (recommended) (default: true)
  enableDefaultDeny: true
  
  # indicates we should redirect to the identity provider for logging out (default: false)
  enableLogoutRedirect: false
  
  # enable encryption for the access tokens (default: false) - you need an encryption-key if 'true'
  enableEncryptedToken: false
  
  # enable http logging of the requests (default: false)
  enableLogging: true
  
  # switch on json logging rather than text (default: false)
  enableJsonLogging: true
  
  # enables the forwarding proxy mode, signing outbound request (default: false)
  enableForwarding: false
  
  # enables the security filter handler (default: false) [$PROXY_ENABLE_SECURITY_FILTER]
  enableSecurityFilter: false
  
  # enables the handling of the refresh tokens (default: false) [$PROXY_ENABLE_REFRESH_TOKEN]
  enableRefreshTokens: true
  
  # access and refresh tokens are session only i.e. removed browser close (default: true)
  enableSessionCookies: true
  
  # enables the handling of the refresh tokens (default: false) [$PROXY_ENABLE_LOGIN_HANDLER]
  enableLoginHandler: false
  
  # enables the token authentication header X-Auth-Token to upstream (default: true)
  enableTokenHeader: true
  
  # adds the authorization header to the proxy request (default: true) [$PROXY_ENABLE_AUTHORIZATION_HEADER]
  enableAuthorizationHeader: true
  
  # adds the authorization cookies to the uptream proxy request (default: true) [$PROXY_ENABLE_AUTHORIZATION_COOKIES]
  enableAuthorizationCookies: false
  
  # enable the http to https redirection on the http service (default: false)
  enableHttpsRedirection: false
  
  # switching on the golang profiling via pprof on /debug/pprof, /debug/pprof/heap etc (default: false)
  enableProfiling: false
  
  # enable the prometheus metrics collector on /oauth/metrics (default: false)
  enableMetrics: true
  
  # enable the adds the X-XSS-Protection header with mode=block (default: false)
  filterBrowserXss: false
  
  # adds the X-Content-Type-Options header with the value nosniff (default: false)
  filterContentNosniff: false
  
  # enable to the frame deny header (default: false)
  filterFrameDeny: false
  
  # specify the content security policy
  # contentSecurityPolicy:
  
  # enforces the metrics page can only been requested from 127.0.0.1 (default: false)
  localhostMetrics: false
  
  # fallback cookie duration for the access token when using refresh tokens (default: 720h0m0s)
  accessTokenDuration: 720h0m0s
  
  # domain the access cookie is available to, defaults host header
  # cookie-domain:
  
  # name of the cookie use to hold the access token (default: "kc-access")
  cookieAccessName: kc-access
  
  # name of the cookie used to hold the encrypted refresh token (default: "kc-state")
  cookieRefreshName: kc-state
  
  # enforces the cookie to be secure (default: true)
  secureCookie: true
  
  # enforces the cookie is in http only mode (default: true)
  httpOnlyCookie: true
  
  # a map of claims that MUST exist in the token presented and the value is it MUST match
  # So for example, you could match the audience or the issuer or some custom attribute
  # matchClaims: {}
  
  # a list of claims to inject into the authentication headers i.e. given_name -> X-Auth-Given-Name
  # addClaims: {}

  # path to ths TLS certificate
  # tlsCert: ""
  
  # path to the private key for TLS
  # tlsPrivateKey: ""
  
  # path to the ca certificate used for signing requests, used for mutual TLS
  # tlsCaCertificate: ""

  # path the ca private key, used by the forward signing proxy
  # tlsCaKey:

  # path to the client certificate for outbound connections in reverse and forwarding proxy modes
  # tlsClientCertificate:

  # skip the verification of any upstream TLS (default: true)
  skipUpstreamTlsVerify: true

  # an array of origins (Access-Control-Allow-Origin)
  # corsOrigins: []
  
  # an array of methods (Access-Control-Allow-Methods)
  # corsMethods: []

  # an array of headers to apply (Access-Control-Allow-Headers)
  # corsHeaders: []

  # an array of expose headers (Access-Control-Expose-Headers)
  # corsExposedHeaders: []

# credentials access control header (Access-Control-Allow-Credentials) (default: false)
  corsCredentials: false

  # max age applied to cors headers (Access-Control-Max-Age) (default: 0s)
  corsMaxAge: 0s

  # list of hostnames the service will respond to
  # hostnames:
  #   - hostname1
  #   - hostname1.example.com

  # url for the storage subsystem, e.g redis://127.0.0.1:6379, file:///etc/tokens.file
  # storeUrl:

  # encryption key used to encryption the session state [$PROXY_ENCRYPTION_KEY], 16 or 32 random alphanum (default: automatically generated by Helm)
  # encryptionKey: "MsVRjD36bfAxfBvHUKUjXOTPXaItDThn"
  
  # use HTTP 303 redirects instead of 307 for invalid auth tokens (default: false)
  invalidAuthRedirectsWith303: false

  # do not have back redirects when no authentication is present, 401 them (default: false), simple 307 it
  noRedirects: false

  # TESTING ONLY; bypass token verification, only expiration and roles enforced (default: false)
  skipTokenVerification: false
  
  # upstream-keepalives specified wheather you want keepalive on the upstream endpoint
  upstreamKeepalives: true

  # maximum amount of time a dial will wait for a connect to complete (default: 10s)
  upstreamTimeout: 10s
  
  # specifies the keep-alive period for an active network connection (default: 10s)
  upstreamKeepaliveTimeout: 10s
  
  # the timeout placed on the tls handshake for upstream (default: 10s)
  upstreamTlsHandshakeTimeout: 10s
  
  # the timeout placed on the response header for upstream (default: 10s)
  upstreamResponseHeaderTimeout: 10s

  # the timeout placed on the expect continue for upstream (default: 10s)
  upstreamExpectContinueTimeout: 10s
  
  # enable proxy protocol (default: false)
  enabledProxyProtocol: false

  # max idle upstream / keycloak connections to keep alive, ready for reuse (default: 0)
  maxIdleConnections: 10

  # limits the number of idle connections maintained per host (default: 0)
  maxIdleConnecitonsPerHost: 10

  # the server read timeout on the http server (default: 10s)
  serverReadTimeout: 10s

  # the server write timeout on the http server (default: 10s)
  serverWriteTimeout: 10s

  # the server idle timeout on the http server (default: 2m0s)
  serverIdleTimeout: 2m0s

  # use letsencrypt for certificates (default: false)
  useLetsencrypt: false

  # path where cached letsencrypt certificates are stored (default: "./cache/")
  letsencryptCacheDir: ./cache/

  # path to custom template displayed for signin
  # signInPage:
  
  # path to custom template used for access forbidden
  # forbiddenPage:
  
  # keypairs passed to the templates at render,e.g title=Page
  # tags:

  # username to use when logging into the openid provider [$PROXY_FORWARDING_USERNAME]
  # forwardingUsername:

  # password to use when logging into the openid provider [$PROXY_FORWARDING_PASSWORD]
  # forwardingPassword:
  
  # list of domains which should be signed; everything else is relayed unsigned
  # forwardingDomains:

  # disables all logging to stdout and stderr (default: false)
  disableAllLogging: false